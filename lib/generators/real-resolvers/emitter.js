"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const console_message_1 = require("../../models/console-message");
class Emitter {
    emitQuery(stream, name) {
        stream.write(`/*\nThis files will be generated by ${console_message_1.ConsoleMessage.TITLE} only if it does NOT exist\n*/\n`);
        stream.write(`\n${this._emitQueryImports(name)}\n`);
        stream.write(`\n${this._emitQueryExports(name)}\n`);
    }
    _emitQueryExports(name) {
        const camelCasedName = name.charAt(0).toLowerCase() + name.substr(1);
        const properties = [
            `...${name}QueryResolversCodeGen,`,
            `// you can add more functions and even override those in ${name}QueryResolversCodeGen`
        ];
        return `export const ${name}QueryResolvers: Pick<QueryResolvers, "${camelCasedName}" | "${camelCasedName}s"> = {\n${this._indent(properties)}\n}`;
    }
    _emitQueryImports(name) {
        const imports = [
            `import { QueryResolvers } from '../../resolvers';`,
            `import { ${name}QueryResolversCodeGen } from './${name}QueryResolversCodeGen';`,
        ];
        return imports.join('\n');
    }
    emitQueryCodeGen(stream, name, codegen) {
        stream.write(`/*\nThis files was generated using ${console_message_1.ConsoleMessage.TITLE}\nDo not edit this file manually\n*/\n`);
        stream.write(`\n${this._emitQueryImportsCodeGen(name)}\n`);
        stream.write(`\n${this._emitQueryExportsCodeGen(name, codegen)}\n`);
    }
    _emitQueryExportsCodeGen(name, codegen) {
        const camelCasedName = name.charAt(0).toLowerCase() + name.substr(1);
        const properties = [];
        properties.push(`async ${camelCasedName}(root, args, ctx, info) {`);
        const modelCodeToInsert = codegen.model;
        if (modelCodeToInsert) {
            modelCodeToInsert.split('\n').forEach(line => properties.push(`  ${line}`));
        }
        properties.push(`},`);
        properties.push(`async ${camelCasedName}s(root, args, ctx, info) {`);
        const modelsCodeToInsert = codegen.models;
        if (modelsCodeToInsert) {
            modelsCodeToInsert.split('\n').forEach(line => properties.push(`  ${line}`));
        }
        properties.push(`}`);
        return `export const ${name}QueryResolversCodeGen: Pick<QueryResolvers, "${camelCasedName}" | "${camelCasedName}s"> = {\n${this._indent(properties)}\n}`;
    }
    _emitQueryImportsCodeGen(name) {
        const imports = [
            `import { QueryResolvers, ${name} } from '../../resolvers';`,
        ];
        return imports.join('\n');
    }
    emitRoot(stream) {
        stream.write(`/*\nThis files was generated using ${console_message_1.ConsoleMessage.TITLE}\nDo not edit this file manually\n*/\n`);
        stream.write(`\n${this._emitRootImports()}\n`);
        stream.write(`\n${this._emitRootExports()}\n`);
    }
    _emitRootExports() {
        const properties = [
            `Mutation: mutationResolvers,`,
            `Query: queryResolvers,`,
        ];
        return `export const resolvers: Resolvers = {\n${this._indent(properties)}\n}`;
        ;
    }
    _emitRootImports() {
        const imports = [
            `import { Resolvers } from './resolvers';`,
            `import { mutationResolvers } from './mutations';`,
            `import { queryResolvers } from './queries';`,
        ];
        return imports.join('\n');
    }
    emitRootQuery(stream, names) {
        stream.write(`/*\nThis files was generated using ${console_message_1.ConsoleMessage.TITLE}\nDo not edit this file manually\n*/\n`);
        stream.write(`\n${this._emitRootQueryImports(names)}\n`);
        stream.write(`\n${this._emitRootQueryExports(names)}\n`);
    }
    _emitRootQueryExports(types) {
        const properties = lodash_1.default.map(types, type => `...${type}QueryResolvers,`);
        return `export const queryResolvers: QueryResolvers = {\n${this._indent(properties)}\n}`;
        ;
    }
    _emitRootQueryImports(names) {
        const imports = [
            `import { QueryResolvers } from '../resolvers';`
        ];
        lodash_1.default.each(names, name => {
            imports.push(`import { ${name}QueryResolvers } from './${name.toLowerCase()}/${name}QueryResolvers';`);
        });
        return imports.join('\n');
    }
    _indent(content) {
        if (!lodash_1.default.isArray(content))
            content = content.split('\n');
        return content.map(s => `  ${s}`).join('\n');
    }
}
exports.default = Emitter;
