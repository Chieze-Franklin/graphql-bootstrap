import _ from 'lodash';
import { ConsoleMessage } from '../../models/console-message';

export default class Emitter {
    emitQuery(stream: NodeJS.WritableStream, name: string) {
        stream.write(`/*\nThis files will be generated by ${ConsoleMessage.TITLE} pnly if it does NOT exist\n*/\n`);

        stream.write(`\n${this._emitQueryImports(name)}\n`);

        stream.write(`\n${this._emitQueryExports(name)}\n`);
    }
    private _emitQueryExports(name: string): string {
        const camelCasedName = name.charAt(0).toLowerCase() + name.substr(1);
        const properties = [
            `...${name}QueryResolversCodeGen,`,
            `// you can add more functions and even override those in ${name}QueryResolversCodeGen`
        ];

        return `export const ${name}QueryResolvers: Pick<QueryResolvers, "${camelCasedName}" | "${camelCasedName}s"> = {\n${this._indent(properties)}\n}`;
    }
    private _emitQueryImports(name: string): string {
        const imports = [
            `import { QueryResolvers } from '../../resolvers';`,
            `import { ${name}QueryResolversCodeGen } from './${name}QueryResolversCodeGen';`,
        ];

        return imports.join('\n');
    }


    emitQueryCodeGen(stream: NodeJS.WritableStream, name: string) {
        stream.write(`/*\nThis files was generated using ${ConsoleMessage.TITLE}\nDo not edit this file manually\n*/\n`);

        stream.write(`\n${this._emitQueryImportsCodeGen(name)}\n`);

        stream.write(`\n${this._emitQueryExportsCodeGen(name)}\n`);
    }
    private _emitQueryExportsCodeGen(name: string): string {
        const camelCasedName = name.charAt(0).toLowerCase() + name.substr(1);
        const properties: string[] = [];

        properties.push(`async ${camelCasedName}(root, args, ctx, info) {`);
        // TODO: template for object
        properties.push(`},`);

        properties.push(`async ${camelCasedName}s(root, args, ctx, info) {`);
        // TODO: template for objects
        properties.push(`}`);

        return `export const ${name}QueryResolversCodeGen: Pick<QueryResolvers, "${camelCasedName}" | "${camelCasedName}s"> = {\n${this._indent(properties)}\n}`;
    }
    private _emitQueryImportsCodeGen(name: string): string {
        const imports = [
            `import { QueryResolvers, ${name} } from '../../resolvers';`,
        ];

        return imports.join('\n');
    }

    emitRoot(stream: NodeJS.WritableStream) {
        stream.write(`/*\nThis files was generated using ${ConsoleMessage.TITLE}\nDo not edit this file manually\n*/\n`);

        stream.write(`\n${this._emitRootImports()}\n`);

        stream.write(`\n${this._emitRootExports()}\n`);
    }
    private _emitRootExports(): string {
        const properties: string[] = [
            `Mutation: mutationResolvers,`,
            `Query: queryResolvers,`,
        ];

        return `export const resolvers: Resolvers = {\n${this._indent(properties)}\n}`;;
    }
    private _emitRootImports(): string {
        const imports = [
            `import { Resolvers } from './resolvers';`,
            `import { mutationResolvers } from './mutations';`,
            `import { queryResolvers } from './queries';`,
        ];

        return imports.join('\n');
    }

    emitRootQuery(stream: NodeJS.WritableStream, names: string[]) {
        stream.write(`/*\nThis files was generated using ${ConsoleMessage.TITLE}\nDo not edit this file manually\n*/\n`);

        stream.write(`\n${this._emitRootQueryImports(names)}\n`);

        stream.write(`\n${this._emitRootQueryExports(names)}\n`);
    }
    private _emitRootQueryExports(types: string[]): string {
        const properties = _.map(types, type => `...${type}QueryResolvers,`);

        return `export const queryResolvers: QueryResolvers = {\n${this._indent(properties)}\n}`;;
    }
    private _emitRootQueryImports(names: string[]): string {
        const imports = [
            `import { QueryResolvers } from '../resolvers';`
        ];

        _.each(names, name => {
            imports.push(`import { ${name}QueryResolvers } from './${name.toLowerCase()}/${name}QueryResolvers';`);
        });

        return imports.join('\n');
    }

    private _indent(content: string|string[]): string {
        if (!_.isArray(content)) content = content.split('\n');
        return content.map(s => `  ${s}`).join('\n');
    }
}